@using Microsoft.JSInterop

@implements IAsyncDisposable

@inject IJSRuntime JSRuntime

<label @attributes="AdditionalAttributes"
       @ref="Element">
    @ChildContent
</label>

@code {
    private IJSObjectReference? module;
    private bool disposed;

    /// <summary>
    /// Specifies the content to be rendered inside this <see cref="Label"/>.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    public ElementReference Element { get; protected set; }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module ??= await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "./_content/Blazix/blazix-label.js");

            await module.InvokeVoidAsync("addLabelMouseDownListener", Element);
        }
    }

    /// <inheritdoc />
    public async ValueTask DisposeAsync()
    {
        if (disposed) return;
        disposed = true;

        GC.SuppressFinalize(this);

        if (module != null)
        {
            try
            {
                await module.InvokeVoidAsync("removeLabelMouseDownListener", Element);
                await module.DisposeAsync();
                module = null;
            }
            catch (JSDisconnectedException) { /* Swallow */ }
            catch (TaskCanceledException) { /* Swallow */ }
        }
    }
}