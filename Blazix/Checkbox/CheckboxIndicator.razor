@using Blazix.Presence
@using System.Diagnostics.CodeAnalysis

<Presence As="span"
          Present="Present"
          data-state="@(Context?.State.GetDataState())"
          data-disabled="@(Context?.Disabled == true)"
          @attributes="AdditionalAttributes"
          style="@Style"
          @ref="presenceComponent">
    @ChildContent
</Presence>

@code {
    private Presence? presenceComponent;
    private ElementReference? element;

    private string? Style => CombineStyles(AdditionalAttributes, "pointer-events: none;");

    private bool Present => ForceMount || (Context?.State == CheckedState.Checked || Context?.State == CheckedState.Indeterminate);

    [CascadingParameter]
    private CheckboxContext? Context { get; set; }

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Used to force mounting when more control is needed. Useful when controlling animations.
    /// </summary>
    [Parameter]
    public bool ForceMount { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    [DisallowNull]
    public ElementReference? Element
    {
        get => element ?? presenceComponent?.Element;
        protected set => element = value;
    }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        if (Context is null)
        {
            throw new InvalidOperationException(
                $"'{GetType().Name}' must be used within a '{nameof(CheckboxRoot)}' component that provides a '{nameof(CheckboxContext)}'.");
        }
    }
}
