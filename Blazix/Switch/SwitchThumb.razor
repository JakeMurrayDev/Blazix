<span data-state="@(Context!.Checked.GetDataState())"
      data-disabled="@(Context!.Disabled ? string.Empty : null)"
      @attributes="AdditionalAttributes"
      @ref="Element">
    @ChildContent
</span>

@code {
    [CascadingParameter]
    private SwitchContext? Context { get; set; }

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    public ElementReference? Element { get; private set; }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        if (Context is null)
        {
            throw new InvalidOperationException(
                $"'{GetType().Name}' must be used within a '{nameof(SwitchRoot)}' component that provides a '{nameof(SwitchContext)}'.");
        }
    }
}
