@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<CascadingValue Value="context">
    <button type="button"
            role="switch"
            aria-checked="@CurrentValue.ToString().ToLowerInvariant()"
            aria-required="@(Required ? "true" : null)"
            data-state="@CurrentValue.GetDataState()"
            data-disabled="@(Disabled ? string.Empty : null)"
            disabled="@Disabled"
            value="@ValueAttribute"
            @attributes="AdditionalAttributes"
            id="@Id"
            @onclick="HandleClick"
            @onclick:stopPropagation="clickStopPropagation"
            @ref="buttonElement">
        @ChildContent
    </button>

    @if (IsFormControl)
    {
        <InputCheckbox @ref="inputCheckbox"
                       aria-hidden="true"
                       name="@Name"
                       Value="@CurrentValue"
                       ValueChanged="@HandleCheckboxValueChanged"
                       ValueExpression="@CheckedExpression"
                       DisplayName="@DisplayName"
                       disabled="@Disabled"
                       required="@Required"
                       tabIndex="-1"
                       style="transform: translateX(-100%); position: absolute; pointer-events: none; opacity: 0; margin: 0;" />
    }
</CascadingValue>

@code {
    private readonly string defaultId = $"blx-{Guid.NewGuid():N}";
    private SwitchContext context = new(false, false);
    private bool internalCheckedState = false;
    private bool clickStopPropagation;
    private bool hasConsumerStoppedPropagation = false;
    private ElementReference buttonElement;
    private InputCheckbox? inputCheckbox;
    private IJSObjectReference? module;

    private string Id => GetIdOrDefault(AdditionalAttributes, defaultId);

    private bool IsFormControl => EditContext != null;

    private bool IsControlled => CheckedChanged.HasDelegate;

    private bool CurrentValue => IsControlled ? Checked : internalCheckedState;

    [CascadingParameter]
    private EditContext? EditContext { get; set; }

    /// <summary>
    /// The checked state of the switch when it is initially rendered. Use when you do not need to control its checked state.
    /// </summary>
    [Parameter]
    public bool? DefaultChecked { get; set; } // Keep nullable for default, but state is bool

    /// <summary>
    /// The controlled checked state of the switch.
    /// </summary>
    [Parameter]
    public bool Checked { get; set; }

    /// <summary>
    /// Event handler called when the checked state of the switch changes.
    /// </summary>
    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    /// <summary>
    /// Gets or sets an expression that identifies the bound <see cref="Checked"/>.
    /// </summary>
    [Parameter]
    public Expression<Func<bool>>? CheckedExpression { get; set; }

    /// <summary>
    /// Gets or sets the display name of the switch.
    /// <para>
    /// This value is used when generating error messages when the input value fails to parse correctly.
    /// </para>
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; }

    /// <summary>
    /// When <see langword="true" />, prevents the user from interacting with the switch.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// When true, indicates that the user must check the switch before the owning form can be submitted.
    /// </summary>
    [Parameter]
    public bool Required { get; set; }

    /// <summary>
    /// The name of the switch. Submitted with its owning form as part of a name/value pair.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// Gets or sets the value given as data when submitted with a name.
    /// <para>
    /// Default value is "on".
    /// </para>
    /// </summary>
    [Parameter]
    public string ValueAttribute { get; set; } = "on";

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    public ElementReference? Element => buttonElement;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        // Determine initial state based on controlled/uncontrolled
        // DefaultChecked ?? false ensures we start with a valid bool
        if (!IsControlled)
        {
            internalCheckedState = DefaultChecked ?? false;
        }
        UpdateContext();
    }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        // Update internal state if necessary (e.g., switching from uncontrolled to controlled)
        // Or if DefaultChecked changes in uncontrolled mode
        if (!IsControlled && internalCheckedState != (DefaultChecked ?? false))
        {
            internalCheckedState = DefaultChecked ?? false;
        }

        UpdateContext();
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "./_content/Blazix/blazix-checkbox.js");
        }

        // Sync size after module is potentially loaded and if needed
        if (module != null && IsFormControl && inputCheckbox?.Element != null)
        {
            await SyncInputSize();
        }
    }

    /// <inheritdoc />
    public async ValueTask DisposeAsync()
    {
        if (module != null)
        {
            await module.DisposeAsync();
        }
    }

    private void UpdateContext()
    {
        context = new SwitchContext(CurrentValue, Disabled);
    }

    private async Task SyncInputSize()
    {
        if (module != null && inputCheckbox?.Element != null)
        {
            await module.InvokeVoidAsync("syncInputSize", buttonElement, inputCheckbox.Element);
        }
    }

    private async Task HandleClick(MouseEventArgs e)
    {
        if (Disabled || module == null) return;

        bool nextState = !CurrentValue;

        hasConsumerStoppedPropagation = false;
        clickStopPropagation = false;

        if (IsControlled)
        {
            await CheckedChanged.InvokeAsync(nextState);
            hasConsumerStoppedPropagation = false;
        }
        else
        {
            internalCheckedState = nextState;
            UpdateContext();
        }

        if (IsFormControl)
        {
            clickStopPropagation = true;

            if (inputCheckbox?.Element != null)
            {
                await module.InvokeVoidAsync(
                        "triggerInputEvents",
                        inputCheckbox.Element,
                        nextState,
                        !hasConsumerStoppedPropagation // bubbles = true
                    );
            }
        }
        // If not in a form, but uncontrolled, we need to trigger a render
        else if (!IsControlled)
        {
            StateHasChanged();
        }
    }

    private Task HandleCheckboxValueChanged(bool newValue)
    {
        if (!IsControlled && internalCheckedState != newValue)
        {
            internalCheckedState = newValue;
            UpdateContext();
        }

        return Task.CompletedTask;
    }
}