<button type="button"
        aria-controls="@Context?.GetEffectiveContentId()"
        aria-expanded="@(Context?.IsOpen.ToString().ToLowerInvariant())"
        data-state="@(Context?.IsOpen == true ? "open" : "closed")"
        data-disabled="@(Context?.IsDisabled == true ? string.Empty : null)"
        disabled="@(Context?.IsDisabled ?? false)"
        @attributes="AdditionalAttributes"
        @onclick="HandleClickAsync"
        @ref="Element">
    @ChildContent
</button>

@code {
    [CascadingParameter]
    private CollapsibleContext? Context { get; set; }

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// </summary>
    public ElementReference? Element { get; private set; }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        if (Context is null)
        {
            throw new InvalidOperationException(
                $"'{GetType().Name}' must have an ancestor '{nameof(CollapsibleRoot)}' that provides a '{nameof(CollapsibleContext)}'.");
        }
    }

    private async Task HandleClickAsync()
    {
        if (Context != null && !Context.IsDisabled)
        {
            await Context.OnOpenToggleAsync();
        }
    }
}
