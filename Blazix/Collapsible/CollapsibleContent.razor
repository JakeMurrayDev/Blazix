@using Blazix.Presence
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using System.Text
@using System.Globalization
@using System.Diagnostics.CodeAnalysis
@using static AttributeUtilities

@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ILogger<CollapsibleContent> Logger

<Presence Present="@(Context?.IsOpen == true || ForceMount)"
          data-state="@(Context?.IsOpen == true ? "open" : "closed")"
          data-disabled="@(Context?.IsDisabled == true ? string.Empty : null)"
          id="@effectiveId"
          @attributes="AdditionalAttributes"
          style="@GetElementStyle()"
          @ref="presenceComponent"
          Context="isPresent">
    @if (isPresent)
    {
        @ChildContent
    }
</Presence>

@code {
    private sealed record ElementSize(double? Height, double? Width);

    private Lazy<Task<IJSObjectReference>> moduleTask = default!;
    private DotNetObjectReference<CollapsibleContent>? dotNetObjectReference;
    private Presence? presenceComponent;
    private ElementReference? element;
    private string? effectiveId;
    private double rAF;
    private bool isMountAnimationPrevented;
    private double? height;
    private double? width;
    private bool internalPresent;

    [CascadingParameter]
    private CollapsibleContext? Context { get; set; }

    /// <summary>
    /// Used to force mounting when more control is needed. Useful when controlling animations.
    /// </summary>
    [Parameter]
    public bool ForceMount { get; set; }

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    [DisallowNull]
    public ElementReference? Element
    {
        get => element ?? presenceComponent?.Element;
        protected set => element = value;
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        dotNetObjectReference = DotNetObjectReference.Create(this);
        moduleTask = new(() => JSRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./_content/Blazix/blazix-collapsible.js").AsTask());
        isMountAnimationPrevented = true;
    }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        if (Context is null)
        {
            throw new InvalidOperationException(
                $"'{nameof(CollapsibleContent)}' must have an ancestor '{nameof(CollapsibleRoot)}' that provides a '{nameof(CollapsibleContext)}'.");
        }

        CheckEffectiveId();
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var module = await moduleTask.Value;

        if (firstRender)
        {
            try
            {
                if (module != null)
                {
                    rAF = await module.InvokeAsync<double>("scheduleAnimationFrame", dotNetObjectReference);
                }
            }
            catch (Exception ex) when (ex is JSDisconnectedException || ex is TaskCanceledException) { /* Swallow */ }
            catch (Exception ex)
            {
                Logger.LogError("Error importing blazix-collapsible.js module: {ErrorMessage}", ex.Message);
            }
        }

        if (module != null && Element.HasValue && (internalPresent != Context?.IsOpen == true || ForceMount))
        {
            var result = await module.InvokeAsync<ElementSize>("updateCollapsibleContentSize",
                Element, isMountAnimationPrevented);

            var hasChanged = false;
            if (IsDoubleEqual(height ?? 0, result.Height ?? 0))
            {
                height = result.Height > 0 ? result.Height : null;
                hasChanged = true;
            }
            if (IsDoubleEqual(width ?? 0, result.Width ?? 0))
            {
                width = result.Width > 0 ? result.Width : null;
                hasChanged = true;
            }

            if (hasChanged)
            {
                StateHasChanged();
            }

            internalPresent = Context?.IsOpen == true || ForceMount;
        }
    }

    /// <inheritdoc />
    public async ValueTask DisposeAsync()
    {
        dotNetObjectReference?.Dispose();
        if (moduleTask.IsValueCreated)
        {
            try
            {
                var module = await moduleTask.Value;
                await module.InvokeVoidAsync("cancelScheduledAnimationFrame", rAF);
                await module.DisposeAsync();
            }
            catch (Exception ex) when (ex is JSDisconnectedException || ex is TaskCanceledException) { }
        }
    }

    [JSInvokable]
    public void SetMountAnimationPrevented()
    {
        isMountAnimationPrevented = false;
    }

    private string? GetElementStyle()
    {
        var styles = new StringBuilder();

        if (height.HasValue)
            styles.Append($"--blazix-collapsible-content-height: {height.Value}px;");
        if (width.HasValue)
            styles.Append($"--blazix-collapsible-content-width: {width.Value}px;");

        return CombineStyles(AdditionalAttributes, styles.ToString());
    }

    private void CheckEffectiveId()
    {
        string? userProvidedId = null;
        if (AdditionalAttributes?.TryGetValue("id", out var idAttrObj) == true && idAttrObj is string idStr)
        {
            userProvidedId = idStr;
        }

        var idToUse = userProvidedId ?? Context?.GetEffectiveContentId();
        if (effectiveId != idToUse)
        {
            effectiveId = idToUse;
        }

        Context?.ReportEffectiveContentId(effectiveId);
    }

    private static bool IsDoubleEqual(double a, double b)
    {
        return Math.Abs(a - b) < double.Epsilon;
    }
}