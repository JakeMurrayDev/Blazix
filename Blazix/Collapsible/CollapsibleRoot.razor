@{
    var currentContext = new CollapsibleContext(
        getEffectiveContentId: () => effectiveContentIdForAria,
        reportEffectiveContentId: HandleContentReportingId,
        isDisabled: Disabled,
        isOpen: CurrentValue,
        onOpenToggleAsync: HandleOpenToggleAsync
    );
}

<CascadingValue Value="currentContext">
    <div data-state="@(CurrentValue ? "open" : "closed")"
         data-disabled="@(Disabled ? string.Empty : null)"
         @attributes="AdditionalAttributes"
         @ref="Element">
        @ChildContent
    </div>
</CascadingValue>

@code {
    private readonly string defaultContentId = $"blx-{Guid.NewGuid():N}";
    private string effectiveContentIdForAria = string.Empty;
    private bool internalOpenState;

    private bool IsControlled => OpenChanged.HasDelegate;

    private bool CurrentValue => IsControlled ? Open : internalOpenState;

    /// <summary>
    /// The open state of the collapsible when it is initially rendered. Use when you do not need to control <see cref="Open"/>.
    /// </summary>
    [Parameter]
    public bool? DefaultOpen { get; set; }

    /// <summary>
    /// The controlled open state of the collapsible.
    /// </summary>
    [Parameter]
    public bool Open { get; set; }

    /// <summary>
    /// Occurs when the open state of the collapsible changes.
    /// </summary>
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    /// <summary>
    /// Determines whether the user can interact with the component. Defaults to false.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// </summary>
    public ElementReference? Element { get; private set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        if (!IsControlled)
        {
            internalOpenState = DefaultOpen ?? false;
        }
    }

    private async Task HandleOpenToggleAsync()
    {
        if (Disabled) return;

        if (IsControlled)
        {
            await OpenChanged.InvokeAsync(!Open);
        }
        else
        {
            internalOpenState = !internalOpenState;
        }
    }

    private Task HandleContentReportingId(string? reportedId)
    {
        string newEffectiveId = string.IsNullOrEmpty(reportedId) ? defaultContentId : reportedId;
        if (effectiveContentIdForAria != newEffectiveId)
        {
            effectiveContentIdForAria = newEffectiveId;
            return InvokeAsync(StateHasChanged);
        }
        return Task.CompletedTask;
    }
}
