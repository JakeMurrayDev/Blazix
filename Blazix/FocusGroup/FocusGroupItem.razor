@implements IDisposable

@ChildContent

@code {
    bool focused;

    /// <summary>
    /// Gets or sets the associated <see cref="FocusGroupContext"/>.
    /// </summary>
    [CascadingParameter]
    private FocusGroupContext? Context { get; set; }

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="ElementReference"/> to be focused.
    /// </summary>
    public ElementReference? Element { get; private set; }

    /// <summary>
    /// Indicates whether the focusable component is currently focused.
    /// </summary>
    public bool Focused
    {
        get => focused;
        private set
        {
            if (focused == value) return;
            focused = value;
            if (focused)
            {
                Context?.NotifyItemFocused(this);
            }
        }
    }

    /// <inheritdoc />
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Context?.RegisterItem(this);
        }
    }

    /// <summary>
    /// Releases unmanaged and - optionally - managed resources.
    /// </summary>
    /// <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            Context?.UnregisterItem(this);
        }
    }

    /// <inheritdoc/>
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Sets the <see cref="ElementReference"/> to be focused on.
    /// <para>
    /// This method is required to be called on the first render of the <c>OnAfterRender</c> lifecycle method.
    /// </para>
    /// </summary>
    /// <param name="element">The <see cref="ElementReference"/> to be focused.</param>
    public void SetElement(ElementReference? element) => Element = element;

    /// <summary>
    /// Handles the navigation between items.
    /// <para>
    /// This method is required to be called in <c>onkeydown</c> event.
    /// </para>
    /// </summary>
    /// <param name="e">The keyboard event arguments.</param>
    public Task OnKeyDown(KeyboardEventArgs e) => Context?.OnKeyDown(e) ?? Task.CompletedTask;

    /// <summary>
    /// Focuses the item, setting <see cref="Focused"/> to <see langword="true"/>.
    /// <para>
    /// This method is required to be called in <c>onfocus</c> event.
    /// </para>
    /// </summary>
    public void Focus() => Focused = true;

    /// <summary>
    /// Blurs the item, setting <see cref="Focused"/> to <see langword="false"/>.
    /// <para>
    /// This method is required to be called in <c>onblur</c> event.
    /// </para>
    /// </summary>
    public void Blur() => Focused = false;
}
