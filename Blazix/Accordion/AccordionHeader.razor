@using System.Diagnostics.CodeAnalysis

<div data-state="@(ItemContext?.IsOpen == true ? "open" : "closed")"
     data-disabled="@(ItemContext?.IsDisabled == true ? string.Empty : null)"
     @attributes="AdditionalAttributes"
     @ref="Element">
    @ChildContent
</div>

@code {
    [CascadingParameter]
    private AccordionItemContext? ItemContext { get; set; }

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    [DisallowNull]
    public ElementReference? Element { get; protected set; }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        if (ItemContext is null)
        {
            throw new InvalidOperationException($"'{nameof(AccordionHeader)}' must be used within an '{nameof(__Blazor.Blazix.Accordion.AccordionItem)}'.");
        }
    }
}