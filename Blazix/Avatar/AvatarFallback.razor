@if (canRender || Context!.Status != ImageLoadingStatus.Loaded)
{
    <span @attributes="AdditionalAttributes"
          @ref="Element">
        @ChildContent
    </span>
}

@code {
    private int? delayCached;
    private bool canRender;

    [CascadingParameter]
    private AvatarContext? Context { get; set; }

    /// <summary>
    /// Gets or sets the delay in milliseconds before the fallback is rendered.
    /// </summary>
    [Parameter]
    public int? Delay { get; set; }

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    public ElementReference? Element { get; private set; }

    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        if (Context == null)
        {
            throw new InvalidOperationException(
                $"'{GetType()}' requires to be nested in '{nameof(AvatarContext)}'.");
        }

        if (Delay is null or 0)
        {
            SetCanRender(true);
        }
        else if (delayCached != Delay)
        {
            await DelayRender(Delay.Value);
            delayCached = Delay;
        }
    }

    /// <inheritdoc />
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Context!.Fallback = this;
        }
    }

    /// <summary>
    /// Rerenders the <see cref="AvatarFallback"/>.
    /// </summary>
    internal void Rerender()
    {
        StateHasChanged();
    }

    /// <summary>
    /// Sets the <see cref="canRender"/> field.
    /// </summary>
    /// <param name="canRender">The value to be passed.</param>
    private void SetCanRender(bool canRender)
    {
        this.canRender = canRender;
        StateHasChanged();
    }

    /// <summary>
    /// Delays the rendering of the fallback.
    /// </summary>
    /// <param name="delay">The delay in milliseconds.</param>
    private async Task DelayRender(int delay)
    {
        await Task.Delay(delay);
        SetCanRender(true);
    }
}
