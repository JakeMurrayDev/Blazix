@implements IDisposable

@if (canRender && Context is not null && Context.Status != ImageLoadingStatus.Loaded)
{
    <span @attributes="AdditionalAttributes" @ref="Element">
        @ChildContent
    </span>
}

@code {
    private CancellationTokenSource? delayCts;
    private bool canRender; // Flag indicating if the delay has passed (or wasn't needed)
    private int? currentDelayMs;
    private bool disposed;

    [CascadingParameter]
    private AvatarContext? Context { get; set; }

    /// <summary>
    /// Gets or sets the delay in milliseconds before the fallback is rendered.
    /// </summary>
    [Parameter]
    public int? DelayMs { get; set; }

    /// <summary>
    /// Defines the child components of this instance.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    public ElementReference? Element { get; private set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        if (Context is null)
        {
            throw new InvalidOperationException(
                $"{nameof(AvatarFallback)} must be rendered within an {nameof(AvatarRoot)}."
            );
        }
        Context.OnStatusChange += HandleContextStatusChange;
    }

    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        if (Context is null) return;

        // Re-initialize delay logic if the DelayMs parameter changes,
        // or if the image status changes (handled by HandleContextStatusChange).
        if (DelayMs != currentDelayMs)
        {
            currentDelayMs = DelayMs;
            // Start or reset the delay timer based on the new DelayMs value.
            await InitializeDelayAsync();
        }
    }

    /// <inheritdoc />
    public void Dispose()
    {
        if (disposed) return;
        disposed = true;

        GC.SuppressFinalize(this);

        delayCts?.Cancel();
        delayCts?.Dispose();

        if (Context is not null)
        {
            Context.OnStatusChange -= HandleContextStatusChange;
        }
    }

    private async Task InitializeDelayAsync()
    {
        // Cancel any previous delay timer
        delayCts?.Cancel();
        delayCts?.Dispose();
        delayCts = null;

        var delay = DelayMs ?? 0;

        if (delay <= 0)
        {
            // No delay required, allow rendering immediately (if status isn't 'Loaded')
            canRender = true;
            // StateHasChanged is implicitly called after OnParametersSetAsync completes
        }
        else
        {
            // Start with canRender as false if there's a positive delay
            canRender = false;
            delayCts = new CancellationTokenSource();
            try
            {
                await Task.Delay(delay, delayCts.Token);
                // Delay completed without cancellation.
                if (!disposed)
                {
                    canRender = true;
                    // Trigger a re-render because the state (canRender) changed after an await.
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (TaskCanceledException)
            {
                // Delay was cancelled (e.g., image loaded, component disposed, or DelayMs changed).
                // canRender remains false or is set by HandleContextStatusChange.
            }
        }
    }

    /// <summary>
    /// Handles status changes from the context.
    /// </summary>
    private Task HandleContextStatusChange(ImageLoadingStatus status)
    {
        if (disposed) return Task.CompletedTask;

        if (status == ImageLoadingStatus.Loaded)
        {
            // Image loaded successfully, cancel any pending delay and ensure fallback hides.
            delayCts?.Cancel();
            canRender = false;
        }
        else if (!canRender && (DelayMs ?? 0) <= 0)
        {
            // Image failed (or is loading) and there's no delay, ensure fallback shows.
            canRender = true;
        }
        // If there's an active delay, InitializeDelayAsync/Task.Delay handles setting canRender=true later.

        // Trigger a re-render to show/hide the fallback based on the new status and canRender flag.
        return InvokeAsync(StateHasChanged);
    }
}