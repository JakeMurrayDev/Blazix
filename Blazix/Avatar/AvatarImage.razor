@using Microsoft.JSInterop

@implements IAsyncDisposable

@inject IJSRuntime JSRuntime

@if (Context is not null && Context.Status == ImageLoadingStatus.Loaded)
{
    <img @attributes="AdditionalAttributes"
         @ref="Element"
         src="@actualSrc" />
}

@code {
    private IJSObjectReference? module;
    private DotNetObjectReference<AvatarImage>? dotNetObjectReference;
    private string? currentSrc;
    private string? actualSrc; // The src currently being loaded or successfully loaded
    private bool isDisposed;

    [CascadingParameter]
    private AvatarContext? Context { get; set; }

    /// <summary>
    /// A callback providing information about the loading status of the image.
    /// </summary>
    [Parameter]
    public EventCallback<ImageLoadingStatus> OnLoadingStatusChange { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    public ElementReference? Element { get; private set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        if (Context == null)
        {
            throw new InvalidOperationException(
                $"{nameof(AvatarImage)} must be rendered within an {nameof(AvatarRoot)}."
            );
        }
        dotNetObjectReference = DotNetObjectReference.Create(this);
        Context.OnStatusChange += HandleContextStatusChange;
    }

    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        string? newSrc = null;
        if (AdditionalAttributes?.TryGetValue("src", out var srcValue) == true)
        {
            newSrc = srcValue?.ToString();
        }

        if (newSrc != currentSrc)
        {
            currentSrc = newSrc;
            await LoadImage();
        }
    }

    /// <inheritdoc />
    public async ValueTask DisposeAsync()
    {
        if (isDisposed) return;
        isDisposed = true;

        GC.SuppressFinalize(this);

        if (Context != null)
        {
            Context.OnStatusChange -= HandleContextStatusChange;
        }

        dotNetObjectReference?.Dispose();

        if (module != null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException) { /* Swallow */ }
            catch (TaskCanceledException) { /* Swallow */ }
        }
    }

    private async Task LoadImage()
    {
        module ??= await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import",
            "./_content/Blazix/blazix-avatar.js"
        );

        actualSrc = currentSrc;

        if (string.IsNullOrEmpty(actualSrc))
        {
            await HandleLoadingStatusChange("error");
            return;
        }

        // Wait for image to load in JS.
        // If awaited, the call would be finished first while the image is loading.
        _ = module.InvokeVoidAsync(
            "loadImage",
            dotNetObjectReference,
            actualSrc
        );
    }

    [JSInvokable]
    public async Task HandleLoadingStatusChange(string status)
    {
        if (isDisposed || Context is null) return;

        var newStatus = status switch
        {
            "loading" => ImageLoadingStatus.Loading,
            "loaded" => ImageLoadingStatus.Loaded,
            "error" => ImageLoadingStatus.Error,
            _ => ImageLoadingStatus.Idle,
        };

        await Context.SetStatusAsync(newStatus);

        await OnLoadingStatusChange.InvokeAsync(newStatus);
    }

    /// <summary>
    /// Re-renders the component when the context status changes.
    /// </summary>
    private Task HandleContextStatusChange(ImageLoadingStatus status)
    {
        if (!isDisposed)
        {
            return InvokeAsync(StateHasChanged);
        }

        return Task.CompletedTask;
    }
}